{"version":3,"sources":["profile.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","className","React","Component","Boolean","window","location","hostname","match","SideNav","src","image","href","ReactDOM","render","document","getElementsByClassName"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,qC,uECA3CD,EAAOC,QAAU,IAA0B,kC,6ICc5BC,G,mMARX,OACE,6BACA,4CACA,uBAAGC,UAAU,gBAAb,kB,GALaC,IAAMC,YCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTAC,E,iLAEF,OACC,6BACA,6BACE,yBAAMR,UAAU,wCAAwCS,IAAKC,OAE/D,6BACE,uBAAGC,KAAK,KAAR,SACG,uBAAGA,KAAK,KAAR,YACA,uBAAGA,KAAK,KAAR,WACA,uBAAGA,KAAK,KAAR,oB,GAXYV,IAAMC,WAmB5BU,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,uBAAuB,WAAW,IACxEH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,uBAAuB,QAAQ,M","file":"static/js/main.0ddf8f44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.03db6356.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Main extends React.Component{\n  render(){\n    return( \n      <div>\n      <h2>MAIN CONTENT</h2>\n      <p className=\"text-success\">Paragraph</p>\n      </div>\n    );\n  }\n}\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport image from './profile.jpg';\nimport './index.css';\nimport App from './App';\nimport Main from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass SideNav extends React.Component {\n  render() {\n    return(\n    \t<div>\n    \t<div>\n    \t  <img  className=\"rounded-circle profile img-responsive\" src={image} />\n    \t</div>\n    \t<div>\n    \t  <a href=\"#\">About</a>\n          <a href=\"#\">Services</a>\n          <a href=\"#\">Clients</a>\n          <a href=\"#\">Contact US</a>\n    \t</div>\n    \t</div>\n    \t);\n  }\n}\n\n\nReactDOM.render(<SideNav />, document.getElementsByClassName('sidenav')[0]);\nReactDOM.render(<App />, document.getElementsByClassName('main')[0]);\n\n\n"],"sourceRoot":""}